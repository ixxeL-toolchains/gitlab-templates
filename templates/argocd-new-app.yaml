.argocd-new-app:
  image: ixxel/multi-tools-alpine:latest
  variables:
      ARGOCD_CLUSTER: 'https://kubernetes.default.svc'
      ARGOCD_SERVER: 'argocd-server.argocd.svc.cluster.local:443'
      ARGOCD_USERNAME: 'admin'
      ARGOCD_PASSWORD: ''
      ARGOCD_API_TOKEN: ''
      ARGOCD_APP_NAME: ''
      ARGOCD_APP_PATH: ''
      ARGOCD_APP_NS: ''
      ARGOCD_APP_PROJECT: 'default'
      ARGOCD_APP_HELM_VALUES: 'values.yaml'
      ARGOCD_APP_SYNC_POLICY: 'auto'
      ARGOCD_APP_LABEL: 'source=ci-cd'
      ARGOCD_APP_APPLY_OUT_OF_SYNC: 'true'
      ARGOCD_APP_AUTO_PRUNE: 'true'
      ARGOCD_APP_SELF_HEAL: 'true'
      ARGOCD_APP_CREATE_NS: 'true'
      ARGOCD_APP_SYNC_TIMEOUT: '180'
      ARGOCD_REPO_URL: ''
      ARGOCD_REPO_NAME: ''
      ARGOCD_REPO_REVISION: 'main'
      WORKINGDIR: '.'
  script:
    - |-
      RED="\033[1;31m"
      GREEN="\033[1;32m"
      YELLOW="\033[1;33m"
      BLUE="\033[1;34m"
      PURPLE="\033[1;35m"
      CYAN="\033[1;36m"
      BLANK="\033[0m"
      set +e

      echo -e "${BLUE}[ STEP - CREATIN NEW APP ] > Creating new app with ArgoCD.${BLANK}"
      echo -e "${CYAN}[ INFO ] > ArgoCD client/server version for ${ARGOCD_SERVER}.${BLANK}"
      argocd version --short \
                     --auth-token=${ARGOCD_API_TOKEN} \
                     --server=${ARGOCD_SERVER} \
                     --plaintext
      echo -e "${YELLOW}[ STEP ] > Listing applications...${BLANK}"
      argocd app list --auth-token=${ARGOCD_API_TOKEN} \
                      --server=${ARGOCD_SERVER} \
                      --plaintext
      echo -e "${YELLOW}[ STEP ] > Verifying app named ${ARGOCD_APP_NAME} is deployed...${BLANK}"
      argocd app get ${ARGOCD_APP_NAME} --auth-token=${ARGOCD_API_TOKEN} \
                                        --server=${ARGOCD_SERVER} \
                                        --plaintext

      if [[ $? = 0 ]]
      then
        SYNC_STATUS=$(argocd app get ${ARGOCD_APP_NAME} --auth-token=${ARGOCD_API_TOKEN} \
                                                        --server=${ARGOCD_SERVER} \
                                                        --plaintext \
                                                        --output=json \
                                                        | jq '.status.sync.status')
        HEALTH_STATUS=$(argocd app get ${ARGOCD_APP_NAME} --auth-token=${ARGOCD_API_TOKEN} \
                                                          --server=${ARGOCD_SERVER} \
                                                          --plaintext \
                                                          --output=json \
                                                          | jq '.status.health.status')
        SRC_REPO=$(argocd app get ${ARGOCD_APP_NAME} --auth-token=${ARGOCD_API_TOKEN} \
                                                     --server=${ARGOCD_SERVER} \
                                                     --plaintext \
                                                     --output=json \
                                                     | jq '.status.sync.comparedTo.source.repoURL')
        echo -e "${CYAN}[ INFO ] > Application ${ARGOCD_APP_NAME} is already deployed with sync status ${SYNC_STATUS} and health status ${HEALTH_STATUS} on repo ${SRC_REPO}.${BLANK}"
        echo -e "${PURPLE}[ CANCEL ] > Cancelling app creation.${BLANK}"
        exit 0
      else
        echo -e "${CYAN}[ INFO ] > Application ${ARGOCD_APP_NAME} is not deployed yet.${BLANK}"
      fi

      echo -e "${YELLOW}[ STEP ] > Creating application ${ARGOCD_APP_NAME} with repo ${ARGOCD_REPO_URL}...${BLANK}"
      if [[ ${ARGOCD_APP_SYNC_POLICY} = "auto" ]]
      then
        echo -e "${CYAN}[ INFO ] > Application sync policy is ${ARGOCD_APP_SYNC_POLICY}.${BLANK}"
        ARGOCD_APP_SYNC_OPTIONS=""
        if [[ ${ARGOCD_APP_AUTO_PRUNE} = "true" ]]
        then
          echo -e "${CYAN}[ INFO ] > Application sync option auto-prune enabled.${BLANK}"
          ARGOCD_APP_SYNC_OPTIONS+=" --auto-prune"
        fi

        if [[ ${ARGOCD_APP_SELF_HEAL} = "true" ]]
        then
          echo -e "${CYAN}[ INFO ] > Application sync option self-heal enabled.${BLANK}"
          ARGOCD_APP_SYNC_OPTIONS+=" --self-heal"
        fi

        ARGOCD_APP_SYNC_OPTIONS+=" --sync-option ApplyOutOfSyncOnly=${ARGOCD_APP_APPLY_OUT_OF_SYNC} --sync-option CreateNamespace=${ARGOCD_APP_CREATE_NS}"
      fi
      argocd app create ${ARGOCD_APP_NAME} --repo=${ARGOCD_REPO_URL} \
                                            --server=${ARGOCD_SERVER} \
                                            --auth-token=${ARGOCD_API_TOKEN} \
                                            --plaintext \
                                            --dest-server=${ARGOCD_CLUSTER} \
                                            --dest-namespace=${ARGOCD_APP_NS} \
                                            --revision=${ARGOCD_REPO_REVISION} \
                                            --path=${ARGOCD_APP_PATH} \
                                            --values=${ARGOCD_APP_HELM_VALUES} \
                                            --label=${ARGOCD_APP_LABEL} \
                                            --sync-policy=${ARGOCD_APP_SYNC_POLICY} \
                                            ${ARGOCD_APP_SYNC_OPTIONS}

      echo -e "${YELLOW}[ STEP ] > Checking ${ARGOCD_APP_NAME} app sucessfully deployed...${BLANK}"
      argocd app wait ${ARGOCD_APP_NAME} --auth-token=${ARGOCD_API_TOKEN} \
                                         --server=${ARGOCD_SERVER} \
                                         --plaintext \
                                         --health \
                                         --sync \
                                         --timeout ${ARGOCD_APP_SYNC_TIMEOUT}

      if [[ $? = 0 ]]
      then
        echo -e "${GREEN}[ SUCCESS ] > Application ${ARGOCD_APP_NAME} created successfully.${BLANK}"
      else
        echo -e "${RED}[ FAIL ] > Application ${ARGOCD_APP_NAME} creation failed.${BLANK}"
        exit 1
      fi
        
                                           
                                           

    
